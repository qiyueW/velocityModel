#set($D='$')##表示美元协定整个项目都表示这个意思
#set($MyID_t_name='')
#set($MyID_c_name='')
#set($MyID_t_type='')
#set($MyID_m_type='')
#set($MyID_remarks='')
#foreach($field in ${fields})
#if(${field.t_index}=='PRIMARY KEY')
#set($MyID_t_name="${field.t_name}")
#set($MyID_c_name="${field.c_name}")
#set($MyID_t_type="${field.t_type}")
#set($MyID_m_type="${field.m_type}")
#set($MyID_remarks="${field.c_remarks}")        
#end
#end
package ${bean.package_service};

import ${bean.package_bean}.${bean.name_bean};
import ${bean.package_dao}.${bean.name_dao};
import hk.advanpro.spring.web.support.RestfulPageResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static hk.advanpro.spring.utils.ThreadLocalUtils.fillCreator;
import static hk.advanpro.spring.utils.ThreadLocalUtils.fillModifier;

@Service
@Transactional
public class ${bean.name_service} {
    @Autowired
    private ${bean.name_dao} ${bean.ioc_dao};

    /**
     * 添加spu商品信息
     *
     * @param spuProduct 商品信息
     */
    public void save(SpuProduct spuProduct) {
        fillCreator(spuProduct);
        spuProduct.setStatus(SpuProduct.STATUS_DOWNLINE);
        mapper.save(spuProduct);
    }

    /**
     * 根据spu商品ID获取spu商品信息
     *
     * @param id spu商品ID
     * @return spu商品实体
     */
    public SpuProduct get(Long id) {
        return mapper.get(id);
    }

    /**
     * 修改商品基础信息
     *
     * @param spuProduct 商品信息
     */
    public void updateBase(SpuProduct spuProduct){
        fillModifier(spuProduct);
        mapper.updateBase(spuProduct);
    }

    /**
     * 修改商品型号组合
     *  @param spuProduct 商品信息
     */
    public void updateAttrs(SpuProduct spuProduct){
        fillModifier(spuProduct);
        mapper.updateAttrs(spuProduct);
    }

    /**
     * 修改商品及库存状态
     *  @param spuProduct 商品信息
     */
    public void updateStatusAndSkuStatus(SpuProduct spuProduct){
        fillModifier(spuProduct);
        mapper.updateStatus(spuProduct);
        SkuProduct skuProduct =new SkuProduct();
        skuProduct.setStatus(spuProduct.getStatus());
        skuProduct.setSpuProductId(spuProduct.getId());
        fillModifier(skuProduct);
        skuProductMapper.updateStatusBySpuId(skuProduct);
    }

    /**
     * 删除商品及库存
     *
     * @param id 商品id
     */
    public void deleteAndDeleteSku(Long id) {
        mapper.delete(id);
        skuProductMapper.deleteBySpuId(id);
    }

    /**
     * 获取商品列表，service隔离
     * @param page 页数
     * @param size 页数大小
     * @param serviceNo 服务号id
     * @param categoryUuid 分类uuid
     * @param title 商品标题
     * @return
     */
    public RestfulPageResult findByService(long serviceNo,
                                           String categoryUuid,
                                           String title,
                                           int page,
                                           int size) {
        int start = (page - 1) * size;
        List<SpuProduct> spuProducts=mapper.findByService(serviceNo,categoryUuid,title,start,size);
        long count = mapper.getCountByService(serviceNo,categoryUuid,title);
        return new RestfulPageResult<>(count,spuProducts);
    }

    /**
     * 获取商品列表，service隔离
     * @param page 页数
     * @param size 页数大小
     * @param serviceNo 服务号id
     * @param categoryUuid 分类uuid
     * @param title 商品标题
     * @return
     */
    public RestfulPageResult findByServiceWithInventories(long serviceNo,
                                           String categoryUuid,
                                           String title,
                                           int page,
                                           int size) {
        int start = (page - 1) * size;
        List<SpuProduct> spuProducts=mapper.findByServiceWithInventories(serviceNo,categoryUuid,title,start,size);
        long count = mapper.getCountByService(serviceNo,categoryUuid,title);
        return new RestfulPageResult<>(count,spuProducts);
    }

    /**
     * 获取分类及子分类的商品列表
     *
     * @param category_uuid 分类uuid
     * @return
     */
    public List<SpuProduct> findLikeCategoryUuid(String category_uuid) {
        return mapper.findLikeCategoryUuid(category_uuid);
    }
}
